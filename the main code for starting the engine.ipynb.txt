{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "press enter to start the car\n",
      "F:\\webcam\\opencv_frame_0.pngwritten!\n",
      "F:\\webcam\\opencv_frame_1.pngwritten!\n",
      "F:\\webcam\\opencv_frame_2.pngwritten!\n",
      "F:\\webcam\\opencv_frame_3.pngwritten!\n",
      "F:\\webcam\\opencv_frame_4.pngwritten!\n",
      "F:\\webcam\\opencv_frame_5.pngwritten!\n",
      "WARNING:tensorflow:From c:\\users\\admin\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "WARNING:tensorflow:From c:\\users\\admin\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n",
      "WARNING:tensorflow:From c:\\users\\admin\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\tensorflow\\python\\ops\\math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "(480, 640, 3)\n",
      "(106, 106, 3)\n",
      "[[0.07314222 0.92685777]]\n",
      "press enter to start the car\n",
      "F:\\webcam\\opencv_frame_0.pngwritten!\n",
      "F:\\webcam\\opencv_frame_1.pngwritten!\n",
      "F:\\webcam\\opencv_frame_2.pngwritten!\n",
      "F:\\webcam\\opencv_frame_3.pngwritten!\n",
      "F:\\webcam\\opencv_frame_4.pngwritten!\n",
      "F:\\webcam\\opencv_frame_5.pngwritten!\n",
      "(480, 640, 3)\n",
      "(106, 106, 3)\n",
      "[[9.9999976e-01 1.8482032e-07]]\n",
      "F:\\webcam\\opencv_frame_0.pngwritten!\n",
      "(480, 640, 3)\n",
      "(106, 106, 3)\n",
      "[[0.0687196  0.93128043]]\n",
      "F:\\webcam\\opencv_frame_1.pngwritten!\n",
      "(480, 640, 3)\n",
      "(106, 106, 3)\n",
      "[[0.9926686  0.00733138]]\n",
      "F:\\webcam\\opencv_frame_2.pngwritten!\n",
      "(480, 640, 3)\n",
      "(106, 106, 3)\n",
      "[[0.9988035  0.00119645]]\n",
      "F:\\webcam\\opencv_frame_3.pngwritten!\n",
      "(480, 640, 3)\n",
      "(106, 106, 3)\n",
      "[[0.98899394 0.01100604]]\n",
      "F:\\webcam\\opencv_frame_4.pngwritten!\n",
      "(480, 640, 3)\n",
      "(106, 106, 3)\n",
      "[[9.999330e-01 6.698957e-05]]\n",
      "[1, 0, 0, 0, 0]\n",
      "F:\\webcam\\opencv_frame_0.pngwritten!\n",
      "(480, 640, 3)\n",
      "(106, 106, 3)\n",
      "[[7.586113e-05 9.999242e-01]]\n",
      "F:\\webcam\\opencv_frame_1.pngwritten!\n",
      "(480, 640, 3)\n",
      "(106, 106, 3)\n",
      "[[4.345802e-10 1.000000e+00]]\n",
      "F:\\webcam\\opencv_frame_2.pngwritten!\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import serial\n",
    "import time\n",
    "import numpy as np\n",
    "import winsound\n",
    "from keras.models import load_model\n",
    "from gtts import gTTS\n",
    "import os\n",
    "flag=0\n",
    "i=0\n",
    "t=0\n",
    "c=0\n",
    "l=[]\n",
    "arduino=serial.Serial('COM11',9600)\n",
    "def run():\n",
    "    cam=cv2.VideoCapture(0)\n",
    "    cv2.namedWindow(\"test\")\n",
    "    img_counter=0\n",
    "    input(\"press enter to start the car\")\n",
    "    tts = gTTS(text=\"please place your face properly infront of the cam\", lang='en')\n",
    "    tts.save(\"audio.mp3\")\n",
    "    os.system(\"audio.mp3\")\n",
    "    \n",
    "    \n",
    "    while (img_counter<6):\n",
    "        ret, frame=cam.read()\n",
    "        cv2.imshow(\"test\",frame)\n",
    "        if not ret:\n",
    "            break\n",
    "        k= cv2.waitKey(1)\n",
    "        if(k%256==27):\n",
    "            break\n",
    "        img_name=\"F:\\webcam\\opencv_frame_{}.png\".format(img_counter)\n",
    "        cv2.imwrite(img_name,frame)\n",
    "        print(\"{}written!\".format(img_name))\n",
    "        img_counter += 1\n",
    "    cam.release()\n",
    "    cv2.destroyAllWindows()\n",
    "def run2():\n",
    "    cam=cv2.VideoCapture(0)\n",
    "    cv2.namedWindow(\"test\")\n",
    "    img_counter=0\n",
    "    #input(\"press enter to start the car\")\n",
    "    #tts = gTTS(text=\"please place your face properly infront of the cam\", lang='en')\n",
    "    #tts.save(\"audio.mp3\")\n",
    "    #os.system(\"audio.mp3\")\n",
    "    \n",
    "    \n",
    "    while (img_counter<5):\n",
    "        ret, frame=cam.read()\n",
    "        cv2.imshow(\"test\",frame)\n",
    "        if not ret:\n",
    "            break\n",
    "        k= cv2.waitKey(1)\n",
    "        if(k%256==27):\n",
    "            break\n",
    "        img_name=\"F:\\webcam\\opencv_frame_{}.png\".format(img_counter)\n",
    "        cv2.imwrite(img_name,frame)\n",
    "        print(\"{}written!\".format(img_name))\n",
    "        img_counter += 1\n",
    "    cam.release()\n",
    "    cv2.destroyAllWindows()\n",
    "    time.sleep(30)\n",
    "\n",
    "run()\n",
    "model=load_model('D:\\model2.h5')\n",
    "img_path='F:\\webcam\\opencv_frame_5.png'\n",
    "x=cv2.imread(img_path)\n",
    "print(x.shape)\n",
    "r1=106/x.shape[0]\n",
    "r2=106/x.shape[1]\n",
    "\n",
    "cropped = cv2.resize(x, (0,0), fx=r2, fy=r1) \n",
    "print(cropped.shape)\n",
    "y=np.expand_dims(cropped,axis=0)\n",
    "\n",
    "p=model.predict(y)\n",
    "print(p)\n",
    "if(p[0][0]>p[0][1]):\n",
    "    i=0\n",
    "elif(p[0][0]<=p[0][1]):\n",
    "    i=1\n",
    "while(flag<2 and i==1):\n",
    "    run()\n",
    "    model=load_model('D:\\model2.h5')\n",
    "    img_path='F:\\webcam\\opencv_frame_5.png'\n",
    "    x=cv2.imread(img_path)\n",
    "    print(x.shape)\n",
    "    r1=106/x.shape[0]\n",
    "    r2=106/x.shape[1]\n",
    "\n",
    "    cropped = cv2.resize(x, (0,0), fx=r2, fy=r1) \n",
    "    print(cropped.shape)\n",
    "    y=np.expand_dims(cropped,axis=0)\n",
    "\n",
    "    p=model.predict(y)\n",
    "    print(p)\n",
    "    if(p[0][0]>p[0][1]):\n",
    "        i=0\n",
    "    elif(p[0][0]<=p[0][1]):\n",
    "        i=1\n",
    "\n",
    "    flag+=1\n",
    "if(flag==2):\n",
    "    tts = gTTS(text=\"please change the driver\", lang='en')\n",
    "    tts.save(\"audio1.mp3\")\n",
    "    os.system(\"audio1.mp3\")\n",
    "if(i==0):\n",
    "    \n",
    "    time.sleep(1)\n",
    "    arduino.write('1'.encode())\n",
    "    time.sleep(1)\n",
    "    while(i!=1):\n",
    "        l=[]\n",
    "        time.sleep(10)\n",
    "        cam=cv2.VideoCapture(0)\n",
    "        cv2.namedWindow(\"test\")\n",
    "        img_counter=0\n",
    "        while (img_counter<5):\n",
    "            ret, frame=cam.read()\n",
    "            cv2.imshow(\"test\",frame)\n",
    "            if not ret:\n",
    "                break\n",
    "            k= cv2.waitKey(1)\n",
    "            if(k%256==27):\n",
    "                break\n",
    "            img_name=\"F:\\webcam\\opencv_frame_{}.png\".format(img_counter)\n",
    "            cv2.imwrite(img_name,frame)\n",
    "            print(\"{}written!\".format(img_name))\n",
    "            model=load_model('D:\\model2.h5')\n",
    "            img_path=img_name\n",
    "            x=cv2.imread(img_path)\n",
    "            print(x.shape)\n",
    "            r1=106/x.shape[0]\n",
    "            r2=106/x.shape[1]\n",
    "\n",
    "            cropped = cv2.resize(x, (0,0), fx=r2, fy=r1) \n",
    "            print(cropped.shape)\n",
    "            y=np.expand_dims(cropped,axis=0)\n",
    "\n",
    "            p=model.predict(y)\n",
    "            print(p)\n",
    "            \n",
    "            if(p[0][0]>p[0][1]):\n",
    "                l.append(0)\n",
    "            elif(p[0][0]<=p[0][1]):\n",
    "                l.append(1)\n",
    "\n",
    "            time.sleep(2)\n",
    "            img_counter += 1\n",
    "        cam.release()\n",
    "        cv2.destroyAllWindows()\n",
    "        \n",
    "        for i in range(0,5):\n",
    "            if(l[i]==1):\n",
    "                t+=1\n",
    "        print(l)\n",
    "        if(t>2):\n",
    "            i=1\n",
    "    #print(\"person is drunk\")\n",
    "        else:\n",
    "            i=0\n",
    "    #print(\"person is not drunk\")\n",
    "\n",
    "        #time.sleep(30)\n",
    "        \n",
    "\n",
    "    if(i==1):\n",
    "        while(c<5):\n",
    "            winsound.Beep(440,1000)\n",
    "            c+=1\n",
    "        #time.sleep(2)\n",
    "        arduino.write('2'.encode())\n",
    "        #time.sleep(2)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
